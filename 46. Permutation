class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res = []#
        

        def backtrack(nums, pre_list):#([1,2,3],[])

            
            if len(nums) <= 0:
                res.append(pre_list)
                
                
            else:
                for i in nums:
                    # 注意copy一份新的调用，否则无法正常循环
                    
                    p_list = pre_list.copy()#[],[1],[1,2],[1],[1,3]
                    #print(p_list)
                    p_list.append(i) #[1],[1,2],[1,2,3],[1,3],[1,3,2]
                    print(p_list)
                    
                    left_nums = nums.copy()#[1,2,3],[2,3],[3],[2,3],[2]
                    
                    left_nums.remove(i)#[2,3],[3],[],[2],[]
                    
                    backtrack(left_nums, p_list)#([2,3],[1]),([3],[1,2]),([],[1,2,3]),([2],[1,3]),([],[1,3,2])
        backtrack(nums, [])        
        return res
