class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        if len(nums) == k:
            return nums
        
        count = collections.Counter(nums)
        return heapq.nlargest(k, count.values(), count.get)
        
        
 #Second solution
 
 class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        #1.hash map; 2.each nums frequency; 3. top k
        frq = defaultdict(list)
        for key, cnt in Counter(nums).items():


            frq[cnt].append(key)


        #2.build the list
        res=[]
        
        #3.top k results
        for times in reversed(range(len(nums) + 1)):
            res.extend(frq[times])

            
            if len(res) >= k: 
                return res[:k]

        return res[:k]     
