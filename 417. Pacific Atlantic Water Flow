class Solution:
    def pacificAtlantic(self, matrix: List[List[int]]) -> List[List[int]]:
        #https://blog.csdn.net/fuxuemingzhu/article/details/82917037
        
        if not matrix or not matrix[0]:
            return []
        
        m,n = len(matrix), len(matrix[0])
        
        p_vis = [[False]*n for _ in range(m)]
        a_vis = [[False]*n for _ in range(m)]
        
        for i in range(m):
            self.dfs(p_vis, matrix, m, n, i, 0)
            self.dfs(a_vis,matrix,m,n,i,n-1)
            
        for j in range(n):
            self.dfs(p_vis,matrix,m,n,0,j)
            self.dfs(a_vis,matrix,m,n,m-1,j)
            
        res = []
        
        for i in range(m):
            for j in range(n):
                if p_vis[i][j] and a_vis[i][j]:
                    res.append([i,j])
                    
        return res
    
    
    def dfs(self,vis,matrix, m,n,i,j):
        
        vis[i][j] = True
        
        directions = [(-1,0),(1,0),(0,1),(0,-1)]
        for dire in directions:
            x,y = i+dire[0],j+dire[1]
            if x<0 or x>=m or y<0 or y>=n or vis[x][y] or matrix[x][y]<matrix[i][j]:
                continue
                
            self.dfs(vis,matrix,m,n,x,y)
