class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        stack = []
        state_dict = {}
        for idx, char in enumerate(s):
            if char =="(":
                stack.append(idx)
                
            if char ==")" and len(stack)>0:
                state_dict[idx]=True
                state_dict[stack[-1]]=True
                stack.pop()
                
        res = ""
        
        for idx, ch in enumerate(s):
            if ch=='(' or ch==')':
                if idx in state_dict:
                    res+=ch
                    
            else:
                res+=ch
        return res    




=================================
 #this ans can cover the mentioned four cases in 1249
 #but it cannot be accepted for the coner case. 
class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        #build a stack but where pop the 
        
        left_number = 0
        right_number = 0
        
        stack=[]
        
        res =''

        for sub in s:
            if stack and sub == '(':
                left_number+=1
                stack.append(sub)
            elif stack and sub == ')':
                right_number+=1
                stack.append(sub)
                if right_number>left_number:
                    stack.pop()
                    right_number-=1

            elif sub!= '(' and sub!=')':
                stack.append(sub)
        
        for char in stack:
            res+=char

        return res
