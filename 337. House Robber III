# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rob(self, root: TreeNode) -> int:
        memo = dict()
        
        return self.helper(root,memo)
    
    def helper(self, root, memo):
        if not root:
            return 0
        
        if root in memo:
            return memo[root]
        
        
        res = 0
        
        notused = self.helper(root.left, memo) + self.helper(root.right, memo)
        
        used = 0
        
        if root.left:
            used+=self.helper(root.left.left,memo)+self.helper(root.left.right, memo)
            
        if root.right:
            used+=self.helper(root.right.left,memo)+self.helper(root.right.right,memo)
            
        res = max(notused, used+root.val)
        memo[root]=res
        return res
